{"version":3,"sources":["components/card/card.component.jsx","components/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChage","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAChB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACf,4BAAIN,EAAMI,QAAQG,YCJjBC,G,MAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,YAAf,SAEJD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLhBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,YAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCHG,G,wDArCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAO1C,WAAW,IAAD,EAC0BC,KAAKN,MAA/Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACA,oDACA,cAAC,EAAD,CACAW,YAAY,gBACZC,YAAagB,KAAKZ,eAElB,cAAC,EAAD,CAAUR,SAAUqB,W,GAhCRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd4ac1e8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card-styles.css'\r\n\r\nexport const Card = props => {\r\n    return (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n    </div>)\r\n}","import React from 'react'\r\nimport {Card} from './card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => {\r\n    return (<div className='card-list'>\r\n    {\r\n        props.monsters.map(monster => (\r\n          <Card key={monster.id} monster={monster}></Card>\r\n      ))}\r\n      </div>)\r\n}","import React from 'react'\r\n\r\nimport './serach-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChage}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChage} \r\n      />\r\n)","import React, {Component} from 'react'\nimport { CardList } from './components/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => {\n    this.setState({searchField : e.target.value})\n  }\n\n  render () {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox \n      placeholder='Seach Monster'\n      handleChage={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters} />      \n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}